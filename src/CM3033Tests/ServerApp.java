package CM3033Tests;

import java.awt.Component;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Marina Shchukina 1014481@rgu.ac.uk
 */
public class ServerApp extends javax.swing.JFrame implements Runnable {

    ////////////////////////////
    //////   VARIABLES   ///////
    ////////////////////////////
    
    // variable to store the maxLimit and minLimit
    private int highValue, lowValue;
    // variables to store the oldMaxLimit and oldMinLimit
    private int oldHighValue = highValue, oldLowValue = lowValue;
    // A date format template
    final DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
    // A calander to store the time of now and the time the application was started
    Calendar now = null, start = Calendar.getInstance();
    // Variable to store the Shared Data class
    DataShare dataShare;
    
    
    ////////////////////////////
    //////  CONSTRUCTOR  ///////
    ////////////////////////////
    
    public ServerApp(DataShare ds2) throws IOException {
        // Initialise the components
        initComponents();
        
        // set the data share to that passed to this class
        //dataShare = ds2;

        // Reset the max and min value dropdowns
        //maxValue.removeAllItems();
        //minValue.removeAllItems();

        // Add the options to the max/min
        maxValue.addItem(40);
        maxValue.addItem(60);
        maxValue.addItem(80);
        maxValue.addItem(100);
        maxValue.addItem(120);
        maxValue.addItem(140);
        maxValue.addItem(160);
        maxValue.addItem(180);
        maxValue.addItem(200);
        minValue.addItem(20);
        minValue.addItem(40);
        minValue.addItem(60);
        minValue.addItem(80);
        minValue.addItem(100);
        minValue.addItem(120);
        minValue.addItem(140);
        minValue.addItem(160);
        minValue.addItem(180);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maxLabel = new javax.swing.JLabel();
        maxValue = new javax.swing.JComboBox();
        topPanel = new javax.swing.JPanel();
        elapsedTimeValue = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        currentTime = new javax.swing.JLabel();
        elapsedTime = new javax.swing.JLabel();
        currentTimeValue = new javax.swing.JLabel();
        Connection1 = new javax.swing.JPanel();
        bpmLabel = new javax.swing.JLabel();
        bpmValue1 = new javax.swing.JLabel();
        lastUpdateLabel = new javax.swing.JLabel();
        lastUpdateValue = new javax.swing.JTextField();
        maxLabel1 = new javax.swing.JLabel();
        minLabel1 = new javax.swing.JLabel();
        maxValue1 = new javax.swing.JLabel();
        minValue1 = new javax.swing.JLabel();
        alarmLog1 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        maxLabel.setText("Max:");

        maxValue.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        maxValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxValueActionPerformed(evt);
            }
        });

        elapsedTimeValue.setText("00:00:00");

        jLabel1.setText("Connections");

        currentTime.setText("Current Time:");

        elapsedTime.setText("Elapsed Time:");

        currentTimeValue.setText("00:00:00");

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(topPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(elapsedTime))
                            .addGroup(topPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(currentTime)))
                        .addGap(31, 31, 31)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(elapsedTimeValue, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(currentTimeValue, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(elapsedTimeValue)
                    .addComponent(currentTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentTimeValue, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(elapsedTime, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        Connection1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        Connection1.setName("Patient 1"); // NOI18N

        bpmLabel.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        bpmLabel.setText("Patient's BPM:");

        bpmValue1.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        bpmValue1.setForeground(new java.awt.Color(45, 2, 208));
        bpmValue1.setText("200");

        lastUpdateLabel.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        lastUpdateLabel.setText("Last update:");

        lastUpdateValue.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lastUpdateValue.setText("jTextField1");

        maxLabel1.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        maxLabel1.setText("Max:");

        minLabel1.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        minLabel1.setText("Min:");

        maxValue1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        maxValue1.setText("60");

        minValue1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        minValue1.setText("120");

        alarmLog1.setToolTipText("");
        alarmLog1.setAutoscrolls(true);
        alarmLog1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        alarmLog1.setName("Alarm Log"); // NOI18N

        javax.swing.GroupLayout Connection1Layout = new javax.swing.GroupLayout(Connection1);
        Connection1.setLayout(Connection1Layout);
        Connection1Layout.setHorizontalGroup(
            Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Connection1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(alarmLog1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Connection1Layout.createSequentialGroup()
                        .addComponent(maxLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(maxValue1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(minValue1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Connection1Layout.createSequentialGroup()
                        .addComponent(bpmLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bpmValue1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Connection1Layout.createSequentialGroup()
                        .addComponent(lastUpdateLabel)
                        .addGap(6, 6, 6)
                        .addComponent(lastUpdateValue, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)))
                .addContainerGap())
        );
        Connection1Layout.setVerticalGroup(
            Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Connection1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bpmLabel)
                    .addComponent(bpmValue1))
                .addGap(11, 11, 11)
                .addGroup(Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastUpdateLabel)
                    .addComponent(lastUpdateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maxLabel1)
                        .addComponent(maxValue1))
                    .addGroup(Connection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(minLabel1)
                        .addComponent(minValue1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(alarmLog1, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );

        alarmLog1.getAccessibleContext().setAccessibleName("Alarm log");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(Connection1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 450, Short.MAX_VALUE)
                .addComponent(maxLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(156, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxLabel)
                            .addComponent(maxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(Connection1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(217, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 468, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void maxValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxValueActionPerformed
        // Test the dropdown variables with the max
        testDropDowns("max");
    }//GEN-LAST:event_maxValueActionPerformed

    // A method to update the time
    public void updateTime() {
        // set the now calander
        now = Calendar.getInstance();
        // get the time from the now calander
        Date time = now.getTime();
        // Set the time label to the selected time
        currentTimeValue.setText(dateFormat.format(time));
        // Set the elapsed variable to the current time minus the start time.
        elapsedTimeValue.setText(dateFormat.format((time.getTime() - start.getTimeInMillis() - 3600000)));
    }

    // The method to test dropdowns
    private void testDropDowns(String v) {
        // if both max values and max strings have been initiated
        if (maxValue.getSelectedItem() != null && maxValue.getSelectedItem().toString() != null) {
            // if both max values and max strings have been initiated
            if (minValue.getSelectedItem() != null && minValue.getSelectedItem().toString() != null) {
                // Set highvalue to the value from the relative drop down
                highValue = Integer.parseInt(maxValue.getSelectedItem().toString());
                // Set highvalue to the value from the relative drop down
                lowValue = Integer.parseInt(minValue.getSelectedItem().toString());
                // If the high value is lower or equal to the min
                if (highValue <= lowValue) {
                    switch (v) {
                        case "max":
                            // If max, set the max to the old value
                            maxValue.setSelectedItem(oldHighValue);
                            // break
                            break;
                        case "min":
                            // if min, set the min to the old value
                            minValue.setSelectedItem(oldLowValue);
                            // break
                            break;
                    }
                    // Create a frame to display the error message
                    Component frame = null;
                    // Show the error for the dropdown
                    JOptionPane.showMessageDialog(frame, "The \"Max Value\" must be more than the \"Min Value\"!");
                } else {
                    // Else valid change
                    switch (v) {
                        case "max":
                            // set the oldMax to the new max
                            oldHighValue = highValue;
                        case "min":
                            // set the oldMin to the new min
                            oldLowValue = lowValue;
                    }
                    // Set the data share maxmin to the relevant value
                    dataShare.setMaxMin(highValue + "," + lowValue);
                }
            }
        }
    }

    // A method to the configure if the client is connected or not. 
    public void setConnection(boolean connected) {
        if (!connected) {
            // If connected, disable the dropdowns
            maxValue.setEnabled(false);
            minValue.setEnabled(false);
            // Set the mode lable to remote
            opModeValue.setText("Remote");
            // change the connect button to disconnect
            connectionButton.setText("Disconnect");
        } else {
            // Set the mode label to local
            opModeValue.setText("Local");
            // set the disconnect button to connect
            connectionButton.setText("Connect");
            // enable both the dropdowns
            maxValue.setEnabled(true);
            minValue.setEnabled(true);
        }
    }

    // A method to alter the text in the scrollable text box
    public void alterText(String text) {
        // Display the time the message was posted to the text area as well as the text passed
        now = Calendar.getInstance();
        textSpace.append(dateFormat.format(now.getTime()) + " | " + text + "\n");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Connection1;
    private javax.swing.JScrollPane alarmLog1;
    private javax.swing.JLabel bpmLabel;
    private javax.swing.JLabel bpmValue1;
    private javax.swing.JLabel currentTime;
    private javax.swing.JLabel currentTimeValue;
    private javax.swing.JLabel elapsedTime;
    private javax.swing.JLabel elapsedTimeValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lastUpdateLabel;
    private javax.swing.JTextField lastUpdateValue;
    private javax.swing.JLabel maxLabel;
    private javax.swing.JLabel maxLabel1;
    private javax.swing.JComboBox maxValue;
    private javax.swing.JLabel maxValue1;
    private javax.swing.JLabel minLabel1;
    private javax.swing.JLabel minValue1;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        // Show the GUI
        setVisible(true);
        // Update the time in near real time
        while (dataShare.isRunning()) {
            updateTime();
        }
    }
}
